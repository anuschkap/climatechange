assign("csign", rep(1,times=nvar), envir=parent.frame())
auto <- "y"              #iterative estimation on by default
quit <- 0                #false implies go ahead and estimate
while (iter == 0 || converge > tola) {   #MASTER CONTROL LOOP WHICH ITERATES UNTIL SOLUTION REACHED
for (fb in 1:2) { #    MASTER fb LOOP       fb=1 is forward, 2 backward
dominate.out<- dominate(fb,issue,nperiods,nvar,mood,valid,smoothing,alpha, csign)  #master estimation routine
alpha1<- dominate.out$alpha1
alpha<- dominate.out$alpha
mood[fb,]<- dominate.out$latent
} #next fb
fb <- 3 #average mood from here on
for (p in 1:nperiods) { #    AVERAGE
mood[fb, p] <- (mood[1, p] + mood[2, p]) / 2
} #next p
moodmean<-mean(mood[3,])
sdmood<-sd(mood[3,])
for (p in 1:nperiods) {  #PLACEMENT OF THIS LOOP MAY NOT BE RIGHT
mood[fb,p] <- ((mood[fb,p] - moodmean) * wtstd / sdmood) + wtmean
} #end for
if(plot){
#plot commands
t<- seq(1:nperiods) #time counter used for plot below
lo<- 50 #force scale of iterative plot to large range
hi<- 150
if (min(mood[3,]) < lo) lo=min(mood[3,]) #whichever larger, use
if (max(mood[3,]) > hi) hi=max(mood[3,])
dummy<- rep(lo,nperiods) #dummy is fake variable used to set plot y axis to 50,150
dummy[nperiods]<- hi
if (iter==0) {
plot(t,dummy,type="l",lty=0,xlab="Time Period",ylab="Estimate by iteration",main="Estimated Latent Dimension") #create box, no visible lines
} else {
lines(t,mood[3,],col=iter)
}
}
iter <- iter + 1
if (auto == "y") r<- iscorr(issue,mood) else auto <- "y"   #recompute correlations
wtmean<- 0
wtstd<- 0
vsum<- 0
goodvar<- 0
converge<- 0 #start off default
evalue<- 0
totalvar<- 0
assign("csign", ifelse(is.na(sign(r)), csign, sign(r)), envir=parent.frame())
for (v in 1:nvar) {
wn<- nperiods-sum(is.na(issue[,v]))
#if (!is.na(sign(r[v]))) csign[v]<<- sign(r[v])
wn<- nperiods-sum(is.na(issue[,v]))
if (wn>1) { #sum over variables actually used
vratio <- wn / nperiods
evalue <- evalue + vratio * r[v]^2
totalvar <- totalvar + vratio
} #end if
#convergence tests
if (wn > 3) {
conv <- abs(r[v] - oldr[v])      #conv is convergence test for item=v
conv <- conv * (wn / nperiods)                #weight criterion by number of available periods
if (conv > converge)  converge <- conv        #converge is the global max of conv
} #end if
if (!is.na(r[v])) oldr[v] <- r[v]
if (!is.na(r[v])) valid[v] <- r[v]^2
if (!is.na(av[v])) wtmean <- wtmean + av[v] * valid[v]
if (!is.na(std[v])) wtstd <- wtstd + std[v] * valid[v]
if (!is.na(r[v])) vsum <- vsum + valid[v]
} #end v loop
if (vsum > 0)  wtmean <- wtmean / vsum
if (vsum > 0)  wtstd <- wtstd / vsum
if (pass == 1) {
mean1 <- wtmean
std1 <- wtstd
e1=evalue
} else {
wtmean <- mean1
wtstd <- std1 #*unexp
} #end if
fbcorr <- cor(mood[1,],mood[2,]) #fnfrontback
if (quit != 1) {
if(verbose){
outcount<- outcount+1
}
cv<- format(round(converge,4),nsmall=4)
itfmt<-format(round(iter),justify="right",length=4)
if(verbose){
out[outcount]<- print(paste(itfmt,"       ",cv,"   ",round(tola,4),"    ",round(fbcorr,3),round(alpha1,4),round(alpha,4)))
}
}
if (converge > lastconv)  tola <- tola * 2
lastconv <- converge
auto = "y"  #skip corr on iter=1, set auto on
if (iter >= 50) break #get out of while loop
} #END MASTER WHILE ITERATION CONTROL LOOP
if (auto == "y" && converge<tola) { #IF WE REACH THIS CODE WE HAVE A FINAL SOLUTION TO BE REPORTED
if (pass == 1) out1<- out #hold output for 2 dimensional solution
auto <- "Q"
quit <- 1                #flag solution reached, last time through
r<- iscorr(issue,mood)   #final iteration correlations
if (pass == 1) r1<- r #hold correlations for 2 dimensional solution
if (pass > 1) {
unexp <- totalvar
totalvar <- unexp * totalvar
evalue <- evalue * unexp
} #    end if
if (pass == 1) {
expprop <- evalue / totalvar
tot1 <- totalvar
} else {
erel <- evalue / totalvar          #% exp relative
totalvar <- (1 - expprop) * tot1   #true var=original var discounted by %exp
evalue <- erel * totalvar          #rescale to retain %exp relationship
expprop <- evalue / tot1           #now reduce eral to expprop
} #    end if
for (v in 1:nvar) {
N[v]<- sum(!is.na(issue[,v]))
}
var.out<- list(varname=vl,loadings=r,means=av,std.deviations=std)
if(verbose){
print(" ")
outcount<- outcount+1
out[outcount]<- print(paste("Eigen Estimate ", round(evalue,2), " of possible ",round(tot1,2)))
outcount<- outcount+1
out[outcount]<- print(paste("  Percent Variance Explained: ",round(100 * expprop,2)))
}
if (pass !=  2 && npass>1) {
for (v in 1:nvar) {
valid[v] <- 0               #reset all, regmoodissue will set good=1
if (csign[v] != 0)  issue[,v]<- residmi(issue,v,mood)   #regmoodissue()
} #v loop
}  # if
#begin prn output routine # mood[fb,] is now our estimate,    WHAT ABOUT A SECOND DIMENSION
latent<- mood[fb,] #vector holds values for output
if (pass == 1) latent1<- latent #hold first dimension
if(verbose){
print(" ")
out[outcount+1]<- print(paste("Final Weighted Average Metric:  Mean: ",round(wtmean,2)," St. Dev: ",round(wtstd,2)))
}
#for Zelig output
if (npass==1) {
extract.out<- list(formula=formula,T=nperiods,nvar=nvar,unit=unit,dimensions=npass,period=period,varname=vl,N=N,means=av,std.deviations=std,setup1=out1,loadings1=r1,latent1=latent1)
} else {
if(verbose){
for (i in 6:outcount) {
out[i-5]=out[i]
}
length(out)<- outcount-5
}
extract.out<- list(formula=formula,T=nperiods,nvar=nvar,unit=unit,dimensions=npass,period=period,varname=vl,N=N,means=av,std.deviations=std,setup1=out1,loadings1=r1,latent1=latent1,setup2=out,loadings2=r,latent2=latent)
}
} #end if auto="y"
} #end of for pass=1,2 loop
par(col=1) #reset on termination
class(extract.out)<- "extract"
return(extract.out)
}
output<- extract(Varname,Date,Index,Ncases,
mult=1,begindt=NA,enddt=NA,npass=1,smoothing=TRUE,endmonth=12)
DyadRatios::extract(dra_df$Varname, dra_df$Date, dra_df$Index, dra_df$Ncases, mult=1,begindt=NA,enddt=NA,npass=1,smoothing=TRUE,endmonth=12)
output <- DyadRatios::extract(dra_df$Varname, dra_df$Date, dra_df$Index, dra_df$Ncases, mult=1,begindt=NA,enddt=NA,npass=1,smoothing=TRUE,endmonth=12)
DyadRatios::display(out = output)
DyadRatios::plot(output)
DyadRatios::plot.extract(output)
DyadRatios::summary.extract(output)
index <- eb_tot %>%
filter(env_ec_stat != 3) %>%
mutate(category = ifelse(env_ec_stat > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n()) %>%
mutate(Varname = "env_ec_stat")
View(index)
index2 <- eb_tot %>%
filter(env_prsimp != 3) %>%
mutate(category = ifelse(env_prsimp > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n()) %>%
mutate(Varname = "env_prsimp")
index3 <- eb_tot %>%
filter(role_ind != 3) %>%
mutate(category = ifelse(role_ind > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n()) %>%
mutate(Varname = "role_ind")
index4 <- eb_tot %>%
filter(env_quallife != 3) %>%
mutate(category = ifelse(env_quallife > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n() ) %>%
mutate(Varname = "env_quallife")
index5 <- eb_tot %>%
filter(pers_effort != 3) %>%
mutate(category = ifelse(pers_effort > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n() ) %>%
mutate(Varname = "pers_effort")
index6 <- eb_tot %>%
filter(env_vs_ec != 3) %>%
mutate(category = ifelse(env_vs_ec > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n()) %>%
mutate(Varname = "env_vs_ec")
index7 <- eb_tot %>%
filter(eff_daily != 3) %>%
mutate(category = ifelse(eff_daily > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n()) %>%
mutate(Varname = "eff_daily")
index8 <- eb_tot %>%
filter(big_pol != 3) %>%
mutate(category = ifelse(big_pol > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n()) %>%
mutate(Varname = "big_pol")
index9 <- eb_tot %>%
filter(buyprod != 3) %>%
mutate(category = ifelse(buyprod > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n() ) %>%
mutate(Varname = "buyprod")
index10 <- eb_tot %>%
filter(cc_unstop != 3) %>%
mutate(category = ifelse(cc_unstop > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n()) %>%
mutate(Varname = "cc_unstop")
dra_df <- bind_rows(index, index2, index3, index4, index5, index6, index7, index8, index9, index10)
dra_df <- merge(dra_df, count_per_year)
dra_df$Date <- ISOdate(dra_df$surveyyear, 1, 1)
dra_df$Date <- as.Date(dra_df$Date)
dra_df$Ncases <- dra_df$N
output <- DyadRatios::extract(dra_df$Varname, dra_df$Date, dra_df$Index, dra_df$Ncases, mult=1,begindt=NA,enddt=NA,npass=1,smoothing=TRUE,endmonth=12)
DyadRatios::summary.extract(output)
DyadRatios::plot.extract(output)
# Prepare two datasets to practice with the DRA
load("./data/final_data/eb_tot.RData")
dra_df2 <- data.frame(Varname = character(),
year = numeric(),
Index = numeric(),
stringsAsFactors = FALSE)
var_list <- c("env_ec_stat", "env_prsimp")
for (var in var_list) {
index_data <- eb_tot %>%
filter({{ var }} != 3)
category = ifelse({{ var }} > 3, 1, 0)
index_data <- eb_tot %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n() * 100)
dra_df <- bind_rows(dra_df, index_data)
}
library(tidyverse)
library(dplyr)
for (var in var_list) {
index_data <- eb_tot %>%
filter({{ var }} != 3)
category = ifelse({{ var }} > 3, 1, 0)
index_data <- eb_tot %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n() * 100)
dra_df <- bind_rows(dra_df, index_data)
}
for (var in var_list) {
index_data <- eb_tot %>%
filter({{ var }} != 3)
category = ifelse({{ var }} > 3, 1, 0)
index_data <- eb_tot %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n() * 100)
dra_df2 <- bind_rows(dra_df, index_data)
}
for (var in var_list) {
index_data <- eb_tot %>%
filter({{ var }} != 3)
category = ifelse({{ var }} > 3, 1, 0)
index_data <- eb_tot %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n() * 100)
dra_df2 <- bind_rows(dra_df2, index_data)
}
View(dra_df2)
f.or (var in var_list) {
View(dra_df2)
for (var in var_list) {
index_data <- eb_tot %>%
filter({{ var }} != 3)
category = ifelse({{ var }} > 3, 1, 0)
index_data <- eb_tot %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n(), na.rm=T)
dra_df2 <- bind_rows(dra_df2, index_data)
}
View(dra_df2)
for (var in var_list) {
index_data <- eb_tot %>%
filter({{ var }} != 3)
category = ifelse({{ var }} > 3, 1, 0)
index_data <- eb_tot %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n(), na.rm=T)
Varname = var
dra_df2 <- bind_rows(dra_df2, index_data)
}
View(dra_df2)
dra_df2 <- data.frame(Varname = character(),
year = numeric(),
Index = numeric(),
stringsAsFactors = FALSE)
var_list <- c("env_ec_stat", "env_prsimp")
for (var in var_list) {
index_data <- eb_tot %>%
filter({{ var }} != 3)
category = ifelse({{ var }} > 3, 1, 0)
index_data <- eb_tot %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n(), na.rm=T)
Varname = var
dra_df2 <- bind_rows(dra_df2, index_data)
}
View(dra_df2)
for (var in var_list) {
index_data <- eb_tot %>%
filter({{ var }} != 3)
category = ifelse({{ var }} > 3, 1, 0)
index_data <- eb_tot %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n()) %>%
mutate(Varname = c("var"))
dra_df2 <- bind_rows(dra_df2, index_data)
}
View(dra_df2)
dra_df2 <- data.frame(Varname = character(),
year = numeric(),
Index = numeric(),
stringsAsFactors = FALSE)
var_list <- c("env_ec_stat", "env_prsimp")
for (var in var_list) {
index_data <- eb_tot %>%
filter({{ var }} != 3)
category = ifelse({{ var }} > 3, 1, 0)
index_data <- eb_tot %>%
group_by(surveyyear) %>%
summarise(Index = sum(category) / n()) %>%
mutate(Varname = c({{var}}))
dra_df2 <- bind_rows(dra_df2, index_data)
}
View(dra_df2)
dra_df2 <- data.frame(Varname = character(),
year = numeric(),
Index = numeric(),
cat = numeric(),
stringsAsFactors = FALSE)
var_list <- c("env_ec_stat", "env_prsimp")
for (var in var_list) {
index_data <- eb_tot %>%
filter({{ var }} != 3) %>%
mutate(cat = ifelse({{ var }} > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(cat) / n()) %>%
mutate(Varname = c({{var}}))
dra_df2 <- bind_rows(dra_df2, index_data)
}
View(dra_df2)
({{ var }} != 3)
View(index_data)
(cat = ifelse({{ var }} > 3, 1, 0))
dra_df2 <- data.frame(Varname = character(),
year = numeric(),
Index = numeric(),
cat = numeric(),
stringsAsFactors = FALSE)
for (var in var_list) {
dra_df2 <- data.frame(Varname = character(),
year = numeric(),
Index = numeric(),
cat = numeric(),
stringsAsFactors = FALSE)
var_list <- c("env_ec_stat", "env_prsimp")
for (var in var_list) {
index_data <- eb_tot %>%
filter({{ var }} != 3) %>%
mutate(cat = ifelse({{ var }} > 3, 1, ifelse({{ var }} <= 3, 0, NA))) %>%
group_by(surveyyear) %>%
summarise(Index = sum(cat) / n()) %>%
mutate(Varname = c({{var}}))
dra_df2 <- bind_rows(dra_df2, index_data)
}
View(index_data)
View(index_data)
table(eb_tot$v1)
rm(list=ls())
library(tidyverse)
library(dplyr)
# Prepare two datasets to practice with the DRA
load("./data/final_data/eb_tot.RData")
# N berekenen
count_per_year <- eb_tot %>%
group_by(surveyyear) %>%
summarise(N = n())
index <- eb_tot %>%
filter(env_ec_stat != 3) %>%
mutate(cat = ifelse(env_ec_stat > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(cat) / n()) %>%
mutate(Varname = "env_ec_stat")
index2 <- eb_tot %>%
filter(env_prsimp != 3) %>%
mutate(cat = ifelse(env_prsimp > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(cat) / n()) %>%
mutate(Varname = "env_prsimp")
index3 <- eb_tot %>%
filter(role_ind != 3) %>%
mutate(cat = ifelse(role_ind > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(cat) / n()) %>%
mutate(Varname = "role_ind")
index4 <- eb_tot %>%
filter(env_quallife != 3) %>%
mutate(cat = ifelse(env_quallife > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(cat) / n() ) %>%
mutate(Varname = "env_quallife")
index5 <- eb_tot %>%
filter(pers_effort != 3) %>%
mutate(cat = ifelse(pers_effort > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(cat) / n() ) %>%
mutate(Varname = "pers_effort")
index6 <- eb_tot %>%
filter(env_vs_ec != 3) %>%
mutate(cat = ifelse(env_vs_ec > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(cat) / n()) %>%
mutate(Varname = "env_vs_ec")
index7 <- eb_tot %>%
filter(eff_daily != 3) %>%
mutate(cat = ifelse(eff_daily > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(cat) / n()) %>%
mutate(Varname = "eff_daily")
index8 <- eb_tot %>%
filter(big_pol != 3) %>%
mutate(cat = ifelse(big_pol > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(cat) / n()) %>%
mutate(Varname = "big_pol")
index9 <- eb_tot %>%
filter(buyprod != 3) %>%
mutate(cat = ifelse(buyprod > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(cat) / n() ) %>%
mutate(Varname = "buyprod")
index10 <- eb_tot %>%
filter(cc_unstop != 3) %>%
mutate(cat = ifelse(cc_unstop > 3, 1, 0)) %>%
group_by(surveyyear) %>%
summarise(Index = sum(cat) / n()) %>%
mutate(Varname = "cc_unstop")
dra_df <- bind_rows(index, index2, index3, index4, index5, index6, index7, index8, index9, index10)
dra_df <- merge(dra_df, count_per_year)
dra_df$Date <- ISOdate(dra_df$surveyyear, 1, 1)
dra_df$Date <- as.Date(dra_df$Date)
dra_df$Ncases <- dra_df$N
output <- DyadRatios::extract(dra_df$Varname, dra_df$Date, dra_df$Index, dra_df$Ncases, mult=1,begindt=NA,enddt=NA,npass=1,smoothing=TRUE,endmonth=12)
DyadRatios::summary.extract(output)
DyadRatios::plot.extract(output)
rm(list=ls())
load("./data/meta_analysis/total_reg_results_gam_w_new.RData")
View(total_reg_results)
library(readxl)
cc <- read_excel("./data/cc_versus_env.xlsx")
View(cc)
test <- merge(total_reg_results, cc)
View(test)
total_reg_results <- merge(total_reg_results, cc)
save(total_reg_results, file= "./data/meta_analysis/total_reg_results_gam_w_new.RData" )
View(cc)
model_step_4_att <- rma(yi = mu_time,
sei = mu_time_sd,
data = total_reg_results,
mods = ~ attitude_cat + mean_year_centered + ambiguous + national + or_scale + pec_miss + data + nr_waves + cc_or_env,
method = "ML",
test = "knha")
library(meta)
library(metafor)
model_step_4_att <- rma(yi = mu_time,
sei = mu_time_sd,
data = total_reg_results,
mods = ~ attitude_cat + mean_year_centered + ambiguous + national + or_scale + pec_miss + data + nr_waves + cc_or_env,
method = "ML",
test = "knha")
model_step_4_att
# Step 4. Variance
model_step_4_var <- rma(yi = sig_time_std,
sei = sig_time_sd_std,
data = total_reg_results,
mods = ~  attitude_cat +  mean_year_centered + ambiguous + national + or_scale + pec_miss + data + nr_waves, cc_or_env,
method = "ML",
test = "knha")
# Step 4. Variance
model_step_4_var <- rma(yi = sig_time_std,
sei = sig_time_sd_std,
data = total_reg_results,
mods = ~  attitude_cat +  mean_year_centered + ambiguous + national + or_scale + pec_miss + data + nr_waves,
method = "ML",
test = "knha")
model_step_4_var
# Step 4. Variance
model_step_4_var <- rma(yi = sig_time_std,
sei = sig_time_sd_std,
data = total_reg_results,
mods = ~  attitude_cat +  mean_year_centered + ambiguous + national + or_scale + pec_miss + data + nr_waves, cc_or_env,
method = "ML",
test = "knha")
#install.packages("remotes")
remotes::install_github("davidaarmstrong/DyadRatios")
